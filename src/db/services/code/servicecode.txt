
export async function getByWorkflow(workflow_id: number): Promise<string> {

    const prisma = new PrismaClient();
    let result = null;
    try {
        result = await prisma.task.findMany({
            where: { id: workflow_id },
            include: {
                codelang: true,
                tasktype: true,
                workflow: true,
                taskgroup: true
            }
        });
    }
    catch (error) {
        OpUtil.consoleErr(error, OpUtil.getOpName(DB_TABLES.task, DbOps.GET_BY_FK));
        return JsonResponse.ERROR(OpUtil.getErrMessage(error));
    }
    finally {
        await prisma.$disconnect();
    }
    return JsonResponse.SUCCESS(OpUtil.getOpName(DB_TABLES.task, DbOps.GET_BY_FK), result);

} //end function


/* 
export async function GetFiltered(table: string,filter: string): Promise<string> {     
    const prisma = new PrismaClient(); 
    let result = null;
    try {
        result = await prisma.codeLang.findMany();
    } 
    catch (error) {OpUtil.consoleErr(error,OpUtil.getOpName(table,DbOps.GET_ALL));
        return JsonResponse.ERROR(OpUtil.getErrMessageString(error));
    }
    finally {
        await prisma.$disconnect(); 
    }
    return JsonResponse.SUCCESS(OpUtil.getOpName(table,DbOps.GET_ALL),result);
} 
*/


//src\db\services\servicecodelang.ts

import { JsonResponse } from "@/common/json/model/jsonresponse";
import { PrismaClient } from "@generated/prisma";
import { OpUtil } from "../functions/operationutil";

/*

    const count = await prisma.codeLang.count({
        where: { name: 'Rust' }
    });

    //const count = await prisma.codeLang.count();

const result = await prisma.$queryRaw`
  SELECT * FROM "CodeLang"
`;

const langName = 'Rust';
const result = await prisma.$queryRaw`
  SELECT * FROM "CodeLang" WHERE name = ${langName}`;

await prisma.$executeRaw`
  DELETE FROM "CodeLang" WHERE id = ${someId}
`; 

[
  {
    id: 1,
    name: 'Build parser',
    tasktypeId: 2,
    tasktype: { id: 2, name: 'Compile', ... },
    workflowId: 3,
    workflow: { id: 3, name: 'CI/CD', ... },
    codelangId: 1,
    codelang: { id: 1, name: 'Rust', ... },
    ...
  },
  ...
]

*/


/*
      OpUtil.consoleErr(error, OpUtil.getOpName("apptype", DbOps.UPDATE));
       OpUtil.consoleErr(error, OpUtil.getOpName("apptype", DbOps.DELETE));
              OpUtil.consoleErr(error, OpUtil.getOpName("apptype", DbOps.DELETE_ALL));
export async function update_old(id: number, data: TypeApptype): Promise<string> {
    console.log("updateAppType:", id, data);
    const prisma = new PrismaClient();
    try {
        const result = await prisma.appType.update({
            where: { id: id },
            data: {
                aename: data.aename,
                description: data.description
            }
        });
        return JsonResponse.SUCCESS(OpUtil.getOpName("apptype", DbOps.UPDATE), result);
    }
    catch (error) {
        OpUtil.consoleErr(error, OpUtil.getOpName("apptype", DbOps.UPDATE));
        return JsonResponse.ERROR(OpUtil.getErrMessage(error));
    }
    finally {
        await prisma.$disconnect();
    }
}
*/

export async function GetAllRows(table:string):Promise<string> {
    
    
    const prisma = new PrismaClient();

    const result = await prisma.codeLang.findMany();

    return JsonResponse.success(OpUtil.getOpName(table,"getAll"), result).toJson();

}//end function