generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------- MODELS -----------------

model Codelang {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(20)
  description  String        @db.VarChar(150)
  tasks        Task[]
  applications Application[]

  @@map("codelang")
}

model Tasktype {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  description String? @db.VarChar(200)
  tasks       Task[]

  @@map("tasktype")
}

model Workflow {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(100)
  context       String?        @db.Text
  description   String?        @default("undefined") @db.Text
  application   String?        @db.VarChar(50)
  fpath         String?        @db.VarChar(500)
  updated       DateTime       @updatedAt
  tasks         Task[]
  taskcategorys Taskcategory[]

  @@map("workflow")
}

model Taskcategory {
  id          Int      @id @default(autoincrement())
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  Int      @map("workflow_id")
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(100)
  tasks       Task[]

  @@map("taskcategory")
}

model Task {
  id             Int          @id @default(autoincrement())
  tasktype       Tasktype     @relation(fields: [tasktypeId], references: [id], onDelete: Cascade)
  tasktypeId     Int          @map("tasktype_id")
  codelang       Codelang     @relation(fields: [codelangId], references: [id], onDelete: Cascade)
  codelangId     Int          @map("codelang_id")
  workflow       Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId     Int          @map("workflow_id")
  taskcategory   Taskcategory @relation(fields: [taskcategoryId], references: [id], onDelete: Cascade)
  taskcategoryId Int          @map("taskcategory_id")
  orden          Int
  name           String       @unique @db.VarChar(255)
  tkgroup        Int
  description    String?      @db.Text
  files          String?      @db.Text
  folders        String?      @db.Text

  @@map("task")
}

model Apptype {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(50)
  description  String?       @default("undefined") @db.VarChar(255)
  applications Application[]

  @@map("apptype")
}

model Application {
  id           Int      @id @default(autoincrement())
  apptype      Apptype  @relation(fields: [apptypeId], references: [id], onDelete: Cascade)
  apptypeId    Int
  codelang     Codelang @relation(fields: [codelangId], references: [id], onDelete: Cascade)
  codelangId   Int
  name         String   @unique @db.VarChar(50)
  description  String?  @default("undefined") @db.VarChar(255)
  repository   String?  @default("undefined") @db.VarChar(250)
  author       String?  @db.VarChar(100)
  osystem      String?  @db.VarChar(100)
  appurl       String?  @db.VarChar(500)
  apppath      String?  @db.VarChar(500)
  localdev     Boolean  @default(true)
  usedocker    Boolean  @default(false)
  controlusers Boolean  @default(false)
  useui        Boolean  @default(false)
  useagents    Boolean  @default(false)
  consumedb    Boolean  @default(false)
  consumeapi   Boolean  @default(false)
  consumeai    Boolean  @default(false)
  exposedb     Boolean  @default(false)
  exposeapi    Boolean  @default(false)
  updated      DateTime @updatedAt

  @@map("application")
}
